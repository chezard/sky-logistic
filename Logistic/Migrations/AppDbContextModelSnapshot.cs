// <auto-generated />
using System;
using Logistic.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Logistic.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Logistic.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopGroup")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Logistic.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopGroup")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Logistic.Models.ApportionmentOfCostTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Expense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransportDocumentTableId")
                        .HasColumnType("int");

                    b.Property<int?>("ValyutaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransportDocumentTableId");

                    b.HasIndex("ValyutaId");

                    b.ToTable("ApportionmentOfCostTables");
                });

            modelBuilder.Entity("Logistic.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "655bc1c6-145a-4191-8b30-26cf3a17b5e6",
                            Email = "admin@admin.az",
                            EmailConfirmed = false,
                            Fullname = "Emil-Admin",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.AZ",
                            NormalizedUserName = "EMIL-ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLvGRCMJlvVrAhZf/6duCYNhdYBB8CjCWtZboXcqVHPintk/X5F7dzjP1r4JGIhrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "780714b4-18be-4dd2-bdb7-5ac625fa266e",
                            TwoFactorEnabled = false,
                            UserName = "Emil-Admin"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a744d464-394e-4fc9-8b6e-fbaf37704786",
                            Email = "Vugar@logistic.az",
                            EmailConfirmed = false,
                            Fullname = "Vugar",
                            LockoutEnabled = true,
                            NormalizedEmail = "Vugar@LOGISTIC.AZ",
                            NormalizedUserName = "Vugar",
                            PasswordHash = "AQAAAAEAACcQAAAAEGd/+AQx4wTb3RYm44MzOM5dOTTgOKl2q3DU6VfJcjMmpMjhqnDlZR9oHy48ezSwZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdb2f47a-9c8d-4f7b-b035-24efcdd44d5d",
                            TwoFactorEnabled = false,
                            UserName = "Vugar"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6504a818-b551-478b-8759-2642c87666e4",
                            Email = "Hesen2@logistic.az",
                            EmailConfirmed = false,
                            Fullname = "Hesen",
                            LockoutEnabled = true,
                            NormalizedEmail = "Hesen@LOGISTIC.AZ",
                            NormalizedUserName = "Hesen",
                            PasswordHash = "AQAAAAEAACcQAAAAENFR2V7UAivJ+ubjZ7cuoWgtdypPOLSLhsQyQ2/LHXI/EsMyhL717UUwvt4r4LWfig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ee7ad53-6c2c-4421-a44d-68a45b04b059",
                            TwoFactorEnabled = false,
                            UserName = "Hesen"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01b90ac5-be37-41f0-8798-97cc4f64150e",
                            Email = "Aladdin@logistic.az",
                            EmailConfirmed = false,
                            Fullname = "Aladdin",
                            LockoutEnabled = true,
                            NormalizedEmail = "Aladdin@LOGISTIC.AZ",
                            NormalizedUserName = "Aladdin",
                            PasswordHash = "AQAAAAEAACcQAAAAEGbE1xdifLpB51VTzhFbl+VmmKRnKD4DjfU99CYMkVzn6+VeDoJvVSV3jRPhFJgb+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29245989-0e9f-4ac2-a1ee-b4ec1a90ede1",
                            TwoFactorEnabled = false,
                            UserName = "Aladdin"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "647aa4b8-ee8c-4220-94e9-40ae6ad811a6",
                            Email = "Xezer@logistic.az",
                            EmailConfirmed = false,
                            Fullname = "Xezer",
                            LockoutEnabled = true,
                            NormalizedEmail = "Xezer@LOGISTIC.AZ",
                            NormalizedUserName = "Xezer",
                            PasswordHash = "AQAAAAEAACcQAAAAEK+ctLSqKaZtOXwy5b8AJ8kmzSBXzWv9kRqAyceVFAJnUZeCCPYCB9ajxLNC6WUl8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "484b2ae6-a3bb-4f16-8d1d-e11a011e1479",
                            TwoFactorEnabled = false,
                            UserName = "Xezer"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35c5b08d-8e1e-40c1-9ff0-7ced44d8f3ce",
                            Email = "Veli@logistic.az",
                            EmailConfirmed = false,
                            Fullname = "Veli",
                            LockoutEnabled = true,
                            NormalizedEmail = "Veli@LOGISTIC.AZ",
                            NormalizedUserName = "Veli",
                            PasswordHash = "AQAAAAEAACcQAAAAEEWpUCZu5clh3TonZ3PV0TNl0T62E1i+eMqHAEnVS9HowfsrmL3hHH94U0dRsigxcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f29b9a64-5a8c-4886-a7af-f6c26a69c9c7",
                            TwoFactorEnabled = false,
                            UserName = "Veli"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27abf53d-4f7a-4d4d-92c0-f95e2cf164a1",
                            Email = "Cavid@logistic.az",
                            EmailConfirmed = false,
                            Fullname = "Cavid",
                            LockoutEnabled = true,
                            NormalizedEmail = "Cavid@LOGISTIC.AZ",
                            NormalizedUserName = "Cavid",
                            PasswordHash = "AQAAAAEAACcQAAAAEBYKBKwy4fKfDDfKGdh7sPgzVihDMWcmYj4mhmDGammA2e7rlUtocqSghjDeRKEa2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5800364-9e88-4423-903a-62be9a6620e2",
                            TwoFactorEnabled = false,
                            UserName = "Cavid"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0866139d-f3c1-48ef-8785-b3ba573a707c",
                            Email = "Cabbar@logistic.az",
                            EmailConfirmed = false,
                            Fullname = "Cabbar",
                            LockoutEnabled = true,
                            NormalizedEmail = "Cabbar@LOGISTIC.AZ",
                            NormalizedUserName = "Cabbar",
                            PasswordHash = "AQAAAAEAACcQAAAAEA2v9unwK5+nzzehU1wMSUYdFspUBYEjY+IWWtrJt+xgyny89nq1Gxl8Dte8V/1npg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c27a66e-9b57-480a-83c5-9fc6e622fe22",
                            TwoFactorEnabled = false,
                            UserName = "Cabbar"
                        });
                });

            modelBuilder.Entity("Logistic.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Swift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankGroupId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Logistic.Models.BankGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankGroups");
                });

            modelBuilder.Entity("Logistic.Models.Barcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Barkod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Barcodes");
                });

            modelBuilder.Entity("Logistic.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Logistic.Models.ConditionOfCarriage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConditionOfCarriages");
                });

            modelBuilder.Entity("Logistic.Models.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("Logistic.Models.CorrespondentBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorrespondentBankGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Swift")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondentBankGroupId");

                    b.ToTable("CorrespondentBanks");
                });

            modelBuilder.Entity("Logistic.Models.CorrespondentBankGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CorrespondentBankGroups");
                });

            modelBuilder.Entity("Logistic.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Logistic.Models.CustomerLegalPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int?>("CorrespondentBankId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HH1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HH2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HH3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HH4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CorrespondentBankId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("CustomerLegalPeople");
                });

            modelBuilder.Entity("Logistic.Models.CustomerLegalPersonTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerLegalPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValyutaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("CustomerLegalPersonId");

                    b.HasIndex("ValyutaId");

                    b.ToTable("CustomerLegalPersonTables");
                });

            modelBuilder.Entity("Logistic.Models.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("Logistic.Models.DirectionOfTransportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DirectionOfTransportations");
                });

            modelBuilder.Entity("Logistic.Models.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("Logistic.Models.EnterpriseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EnterpriseTypes");
                });

            modelBuilder.Entity("Logistic.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int?>("CorrespondentBankId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnterpriseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HH1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HH2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HH3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HH4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Leader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CorrespondentBankId");

                    b.HasIndex("EnterpriseTypeId");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Logistic.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorrespondentBankCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CorrespondentBankExpeditorId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EkspeditorId")
                        .HasColumnType("int");

                    b.Property<int>("InternalCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransportDocumentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondentBankCustomerId");

                    b.HasIndex("CorrespondentBankExpeditorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EkspeditorId");

                    b.HasIndex("InternalCompanyId");

                    b.HasIndex("TransportDocumentId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Logistic.Models.InvoiceTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Count")
                        .HasColumnType("float");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceTables");
                });

            modelBuilder.Entity("Logistic.Models.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");
                });

            modelBuilder.Entity("Logistic.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Logistic.Models.Personal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FathersName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonnelTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelTypeId");

                    b.HasIndex("PositionId");

                    b.ToTable("Personals");
                });

            modelBuilder.Entity("Logistic.Models.PersonnelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonnelTypes");
                });

            modelBuilder.Entity("Logistic.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Logistic.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Logistic.Models.StaticNumberAndQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StaticNumberAndQuantities");
                });

            modelBuilder.Entity("Logistic.Models.StatusOfShipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusOfShipments");
                });

            modelBuilder.Entity("Logistic.Models.TransportDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Assistant1Id")
                        .HasColumnType("int");

                    b.Property<string>("Assistant2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Assistant3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Assistant4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DirectionOfTransportationId")
                        .HasColumnType("int");

                    b.Property<string>("FirstAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("LastAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Assistant1Id");

                    b.HasIndex("DirectionOfTransportationId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("TransportDocuments");
                });

            modelBuilder.Entity("Logistic.Models.TransportDocumentTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CommonSalary")
                        .HasColumnType("float");

                    b.Property<int>("ConditionOfCarriageId")
                        .HasColumnType("int");

                    b.Property<string>("Count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectionOfTransportationId")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalId")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<int>("StatusOfShipmentId")
                        .HasColumnType("int");

                    b.Property<int>("TransportDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("TruckPlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfTransportationId")
                        .HasColumnType("int");

                    b.Property<int>("ValyutaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConditionOfCarriageId");

                    b.HasIndex("DirectionOfTransportationId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PersonalId");

                    b.HasIndex("StatusOfShipmentId");

                    b.HasIndex("TransportDocumentId");

                    b.HasIndex("TypeOfTransportationId");

                    b.HasIndex("ValyutaId");

                    b.ToTable("TransportDocumentTables");
                });

            modelBuilder.Entity("Logistic.Models.TypeOfActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfActivities");
                });

            modelBuilder.Entity("Logistic.Models.TypeOfTransportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfTransportations");
                });

            modelBuilder.Entity("Logistic.Models.UnitOfMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasurements");
                });

            modelBuilder.Entity("Logistic.Models.UnofficialClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnofficialClients");
                });

            modelBuilder.Entity("Logistic.Models.Valyuta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Valyutas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "Moderator",
                            NormalizedName = "Moderator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Logistic.Models.ApportionmentOfCostTable", b =>
                {
                    b.HasOne("Logistic.Models.TransportDocumentTable", "TransportDocumentTable")
                        .WithMany("MyProperty")
                        .HasForeignKey("TransportDocumentTableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.Valyuta", "Valyuta")
                        .WithMany()
                        .HasForeignKey("ValyutaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TransportDocumentTable");

                    b.Navigation("Valyuta");
                });

            modelBuilder.Entity("Logistic.Models.Bank", b =>
                {
                    b.HasOne("Logistic.Models.BankGroup", "BankGroup")
                        .WithMany("Banks")
                        .HasForeignKey("BankGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankGroup");
                });

            modelBuilder.Entity("Logistic.Models.City", b =>
                {
                    b.HasOne("Logistic.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Logistic.Models.CorrespondentBank", b =>
                {
                    b.HasOne("Logistic.Models.CorrespondentBankGroup", "CorrespondentBankGroup")
                        .WithMany("CorrespondentBanks")
                        .HasForeignKey("CorrespondentBankGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CorrespondentBankGroup");
                });

            modelBuilder.Entity("Logistic.Models.CustomerLegalPerson", b =>
                {
                    b.HasOne("Logistic.Models.Bank", "Bank")
                        .WithMany("CustomerLegalPeople")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.CorrespondentBank", null)
                        .WithMany("CustomerLegalPeople")
                        .HasForeignKey("CorrespondentBankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistic.Models.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("Logistic.Models.CustomerLegalPersonTable", b =>
                {
                    b.HasOne("Logistic.Models.ContractType", "ContractType")
                        .WithMany("CustomerLegalPersonTables")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.CustomerLegalPerson", "CustomerLegalPerson")
                        .WithMany("CustomerLegalPersonTables")
                        .HasForeignKey("CustomerLegalPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.Valyuta", "Valyuta")
                        .WithMany("CustomerLegalPersonTables")
                        .HasForeignKey("ValyutaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContractType");

                    b.Navigation("CustomerLegalPerson");

                    b.Navigation("Valyuta");
                });

            modelBuilder.Entity("Logistic.Models.Institution", b =>
                {
                    b.HasOne("Logistic.Models.Bank", "Bank")
                        .WithMany("Institutions")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.CorrespondentBank", null)
                        .WithMany("Institutions")
                        .HasForeignKey("CorrespondentBankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistic.Models.EnterpriseType", "EnterpriseType")
                        .WithMany("Institutions")
                        .HasForeignKey("EnterpriseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("EnterpriseType");
                });

            modelBuilder.Entity("Logistic.Models.Invoice", b =>
                {
                    b.HasOne("Logistic.Models.CorrespondentBank", "CorrespondentBankCustomer")
                        .WithMany()
                        .HasForeignKey("CorrespondentBankCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistic.Models.CorrespondentBank", "CorrespondentBankExpeditor")
                        .WithMany()
                        .HasForeignKey("CorrespondentBankExpeditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Logistic.Models.CustomerLegalPerson", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.Institution", "Ekspeditor")
                        .WithMany()
                        .HasForeignKey("EkspeditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.Institution", "InternalCompany")
                        .WithMany()
                        .HasForeignKey("InternalCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.TransportDocument", "TransportDocument")
                        .WithMany()
                        .HasForeignKey("TransportDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CorrespondentBankCustomer");

                    b.Navigation("CorrespondentBankExpeditor");

                    b.Navigation("Customer");

                    b.Navigation("Ekspeditor");

                    b.Navigation("InternalCompany");

                    b.Navigation("TransportDocument");
                });

            modelBuilder.Entity("Logistic.Models.InvoiceTable", b =>
                {
                    b.HasOne("Logistic.Models.Invoice", "Invoice")
                        .WithMany("InvoiceTables")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Logistic.Models.Personal", b =>
                {
                    b.HasOne("Logistic.Models.PersonnelType", "PersonnelType")
                        .WithMany("Personals")
                        .HasForeignKey("PersonnelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.Position", null)
                        .WithMany("Personals")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PersonnelType");
                });

            modelBuilder.Entity("Logistic.Models.TransportDocument", b =>
                {
                    b.HasOne("Logistic.Models.Personal", "Assistant1")
                        .WithMany()
                        .HasForeignKey("Assistant1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.DirectionOfTransportation", "DirectionOfTransportation")
                        .WithMany("TransportDocuments")
                        .HasForeignKey("DirectionOfTransportationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.Institution", "Institution")
                        .WithMany("TransportDocuments")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.PaymentType", "PaymentType")
                        .WithMany("TransportDocuments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assistant1");

                    b.Navigation("DirectionOfTransportation");

                    b.Navigation("Institution");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Logistic.Models.TransportDocumentTable", b =>
                {
                    b.HasOne("Logistic.Models.ConditionOfCarriage", "ConditionOfCarriage")
                        .WithMany("TransportDocumentTables")
                        .HasForeignKey("ConditionOfCarriageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.DirectionOfTransportation", "DirectionOfTransportation")
                        .WithMany("TransportDocumentTables")
                        .HasForeignKey("DirectionOfTransportationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.Institution", "Institution")
                        .WithMany("TransportDocumentTables")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.Personal", "Personal")
                        .WithMany()
                        .HasForeignKey("PersonalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.StatusOfShipment", "StatusOfShipment")
                        .WithMany("TransportDocumentTables")
                        .HasForeignKey("StatusOfShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.TransportDocument", "TransportDocument")
                        .WithMany("TransportDocumentTables")
                        .HasForeignKey("TransportDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.TypeOfTransportation", "TypeOfTransportation")
                        .WithMany("TransportDocumentTables")
                        .HasForeignKey("TypeOfTransportationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.Valyuta", "Valyuta")
                        .WithMany("TransportDocumentTables")
                        .HasForeignKey("ValyutaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConditionOfCarriage");

                    b.Navigation("DirectionOfTransportation");

                    b.Navigation("Institution");

                    b.Navigation("Personal");

                    b.Navigation("StatusOfShipment");

                    b.Navigation("TransportDocument");

                    b.Navigation("TypeOfTransportation");

                    b.Navigation("Valyuta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Logistic.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Logistic.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Logistic.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Logistic.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistic.Models.Bank", b =>
                {
                    b.Navigation("CustomerLegalPeople");

                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("Logistic.Models.BankGroup", b =>
                {
                    b.Navigation("Banks");
                });

            modelBuilder.Entity("Logistic.Models.ConditionOfCarriage", b =>
                {
                    b.Navigation("TransportDocumentTables");
                });

            modelBuilder.Entity("Logistic.Models.ContractType", b =>
                {
                    b.Navigation("CustomerLegalPersonTables");
                });

            modelBuilder.Entity("Logistic.Models.CorrespondentBank", b =>
                {
                    b.Navigation("CustomerLegalPeople");

                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("Logistic.Models.CorrespondentBankGroup", b =>
                {
                    b.Navigation("CorrespondentBanks");
                });

            modelBuilder.Entity("Logistic.Models.CustomerLegalPerson", b =>
                {
                    b.Navigation("CustomerLegalPersonTables");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Logistic.Models.DirectionOfTransportation", b =>
                {
                    b.Navigation("TransportDocumentTables");

                    b.Navigation("TransportDocuments");
                });

            modelBuilder.Entity("Logistic.Models.EnterpriseType", b =>
                {
                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("Logistic.Models.Institution", b =>
                {
                    b.Navigation("TransportDocumentTables");

                    b.Navigation("TransportDocuments");
                });

            modelBuilder.Entity("Logistic.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceTables");
                });

            modelBuilder.Entity("Logistic.Models.PaymentType", b =>
                {
                    b.Navigation("TransportDocuments");
                });

            modelBuilder.Entity("Logistic.Models.PersonnelType", b =>
                {
                    b.Navigation("Personals");
                });

            modelBuilder.Entity("Logistic.Models.Position", b =>
                {
                    b.Navigation("Personals");
                });

            modelBuilder.Entity("Logistic.Models.StatusOfShipment", b =>
                {
                    b.Navigation("TransportDocumentTables");
                });

            modelBuilder.Entity("Logistic.Models.TransportDocument", b =>
                {
                    b.Navigation("TransportDocumentTables");
                });

            modelBuilder.Entity("Logistic.Models.TransportDocumentTable", b =>
                {
                    b.Navigation("MyProperty");
                });

            modelBuilder.Entity("Logistic.Models.TypeOfTransportation", b =>
                {
                    b.Navigation("TransportDocumentTables");
                });

            modelBuilder.Entity("Logistic.Models.Valyuta", b =>
                {
                    b.Navigation("CustomerLegalPersonTables");

                    b.Navigation("TransportDocumentTables");
                });
#pragma warning restore 612, 618
        }
    }
}
